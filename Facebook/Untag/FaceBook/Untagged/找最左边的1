 public int findfirstone(int[][] matrix) {
    if (matrix.length == 0 || matrix[0].length == 0) return -1;
    int idx = matrix[0].length - 1;
    for (int i = 0; i < matrix.length; i++) {
      if (matrix[i][idx] == 0) continue;
      while (idx >= 0 && matrix[i][idx] == 1) idx --;
    }
    return idx + 1 >= matrix[0].length ? -1 : idx + 1;
  }
  
  public int findfirstone1(int[][] matrix) {
    if (matrix.length == 0 || matrix[0].length == 0) return -1;
    int idx = matrix[0].length;
    for (int i = 0; i < matrix.length; i++) {
      int end = idx == matrix[0].length?idx - 1:idx;
      int cur = binarySearch(matrix[i],end);
      if (cur != -1) idx = cur;
    }
    return idx == matrix[0].length? -1 : idx;
  }
  public int binarySearch(int[] num, int end) {
    int start = 0;
    int mid;
    while (start + 1 < end) {
      mid = start + (end - start) / 2;
      if (num[mid] == 1) end = mid;
      else start = mid;
    }
    if (num[start] == 1) return start;
    if (num[end] == 1) return end;
    return -1;
  }
